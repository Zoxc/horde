searchState.loadedDescShard("horde", 0, "This crate contains SyncTable and SyncPushVec which offers …\nAn API for quiescent state based reclamation.\nA contiguous push-only array type with lock-free reads.\nA hash table with lock-free reads.\nRepresents a proof that no deferred methods will run for …\nSignals a quiescent state where garbage may be collected.\nThis schedules a closure to run at some point after all …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMarks the current thread as pinned and returns a proof of …\nRemoves the current thread from the threads allowed to …\nA handle to a SyncPushVec with write access protected by a …\nA handle to a SyncPushVec with read access.\nA contiguous push-only array type with lock-free reads.\nA handle to a SyncPushVec with write access.\nExtracts a mutable slice of the entire vector.\nExtracts a slice containing the entire vector.\nReturns the number of elements the map can hold without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of elements in the table.\nCreates a LockedWrite handle by taking the underlying …\nCreates a LockedWrite handle from a guard protecting the …\nGets a reference to the underlying mutex that protects …\nConstructs a new, empty vector with zero capacity.\nInserts a new element into the end of the table, and …\nCreates a Read handle which gives access to read …\nCreates a Read handle from a pinned region.\nReplaces the content of the vector with the content of the …\nReserves capacity for at least <code>additional</code> more elements to …\nCreates a Write handle without checking for exclusive …\nConstructs a new, empty vector with the specified capacity.\nCreates a Write handle from a mutable reference.\nDefault hash builder for SyncTable.\nAn iterator over the entries of a <code>HashMap</code>.\nA handle to a SyncTable with write access protected by a …\nRepresents where a value would be if inserted.\nA handle to a SyncTable with read access.\nA hash table with lock-free reads.\nA handle to a SyncTable with write access.\nReturns the number of elements the map can hold without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to an element in the table.\nGets a reference to an element in the table.\nGets a mutable reference to an element in the table.\nGets a reference to an element in the table or a potential …\nGets a reference to an element in the table with a custom …\nHashes a key with the table’s hasher.\nReturns a reference to the table’s <code>BuildHasher</code>.\nReturns a reference to the table’s <code>BuildHasher</code>.\nInserts a element into the table. Returns <code>false</code> if it …\nInserts a new element into the table, and returns a …\nInserts a new element into the table, and returns a …\nInserts a new element into the table, and returns a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator visiting all key-value pairs in arbitrary …\nReturns the number of elements in the table.\nCreates a LockedWrite handle by taking the underlying …\nCreates a LockedWrite handle from a guard protecting the …\nGets a reference to the underlying mutex that protects …\nCreates an empty SyncTable.\nCreates an empty SyncTable with the specified capacity, …\nCreates a Read handle which gives access to read …\nCreates a Read handle from a pinned region.\nReturns a new up-to-date potential slot. This can be …\nRemoves an element from the table, and returns a reference …\nReplaces the content of the table with the content of the …\nReserve room for one more element.\nGet a suitable shard index from a hash when sharding the …\nInserts a new element into the table, and returns a …\nCreates a Write handle without checking for exclusive …\nCreates a Write handle from a mutable reference.")